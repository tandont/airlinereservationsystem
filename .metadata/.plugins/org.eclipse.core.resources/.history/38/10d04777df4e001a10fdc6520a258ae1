package com.capgemini.airlinereservationsystem.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.capgemini.airlinereservationsystem.dao.FlightBookingDAO;
import com.capgemini.airlinereservationsystem.dto.Flight;
import com.capgemini.airlinereservationsystem.dto.FlightAvailability;
import com.capgemini.airlinereservationsystem.util.AirlineReservationSystem;

public class FlightBookingDAOImpl implements FlightBookingDAO {

	public FlightBookingDAOImpl() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (Exception e) {
			e.getStackTrace();
		}
	}

	@Override
	public Flight searchFlight(Integer flightId) {
		String query = "SELECT  * FROM flight_details where flightId=" + flightId;
		Flight flight = null;

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(query)) {

			if (rs.next()) {
				flight = new Flight();
				flight.setFlightId(rs.getInt("flightId"));
				flight.setFlightName(rs.getString("flightName"));
				flight.setSource(rs.getString("source"));
				flight.setDestination(rs.getString("destination"));
				flight.setFlightType(rs.getString("flightType"));
				flight.setTotalSeats(rs.getInt("totalSeats"));
				flight.setPrice(rs.getDouble("price"));
				return flight;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Integer checkAvailability(Integer flightId, Date tempDate) {
		Date date = new java.sql.Date(tempDate.getTime());

		String sql = "SELECT availSeats FROM availability where flightId=" + flightId + " and availDate='" + tempDate
				+ "'";

		int seats = 0;

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(sql)) {
			if (rs.next()) {
				seats = rs.getInt("availSeats");
				return seats;
			} else {
				return seats;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return seats;
	}

	@Override
	public List<FlightAvailability> checkAvailability(String source, String destination, Date date1) {
		java.sql.Date date = new java.sql.Date(date1.getTime());

		String query = "SELECT flightId from flight_details where source='" + source + "'" + " and destination='"
				+ destination + "'";
		List<FlightAvailability> availList = new ArrayList<FlightAvailability>();
		FlightAvailability availability = null;

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(query)) {
			while (rs.next()) {
				availability = new FlightAvailability();
				availability.setFlightId(rs.getInt("flighId"));
				availability.setAvailSeat(checkAvailability(rs.getInt("flightId"), date));
				availList.add(availability);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return availList;
	}

}
