package com.capgemini.airlinereservationsystem.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;

import com.capgemini.airlinereservationsystem.dao.FlightBookingDAO;
import com.capgemini.airlinereservationsystem.dao.UserDAO;
import com.capgemini.airlinereservationsystem.dto.Ticket;
import com.capgemini.airlinereservationsystem.dto.User;
import com.capgemini.airlinereservationsystem.util.AirlineReservationSystem;

public class UserDAOImpl implements UserDAO {

	FlightBookingDAO dao = new FlightBookingDAOImpl();
	public UserDAOImpl() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	@Override
	public User registerUser(User user) {
		String query = "INSERT INTO user_details VALUES (?,?,?,?,?,?)";

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);) {
			pstmt.setInt(1, user.getUserId());
			pstmt.setString(2, user.getUserName());
			pstmt.setString(3, user.getUserEmail());
			pstmt.setString(4, user.getUserPassword());
			pstmt.setLong(5, user.getUserContact());
			pstmt.setString(6, "user");
			pstmt.executeUpdate();

		} catch (Exception e) {
			e.getStackTrace();
		}
		return user;
	}

	@Override
	public User loginUser(Integer userId, String password) {
		String query = "SELECT * FROM user_details where userId='" + userId + "' and userPassword='" + password + "'";

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);
				ResultSet rs = pstmt.executeQuery(query)) {

			User user = new User();

			if (rs.next()) {
				user.setUserId(rs.getInt("userId"));
				user.setUserName(rs.getString("userName"));
				user.setUserEmail(rs.getString("userEmail"));
				user.setUserPassword(rs.getString("userPassword"));
				user.setUserContact(rs.getLong("userContact"));
				return user;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Boolean updateUser(User user) {
		String query = "UPDATE user_details SET userName=?, userEmail=?, userPassword=?, userContact=? WHERE userId=? and userType='user'";

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);) {
			pstmt.setString(1, user.getUserName());
			pstmt.setString(2, user.getUserEmail());
			pstmt.setString(3, user.getUserPassword());
			pstmt.setLong(4, user.getUserContact());
			pstmt.setInt(5, user.getUserId());
			pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public Boolean deleteUser(Integer userId) {
		String query = "DELETE FROM user_details WHERE userId="+userId;
		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);) {
			pstmt.setInt(1, userId);
			pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public Ticket bookTicket(Ticket ticket) {
		java.sql.Date date=new java.sql.Date(ticket.getJourneyDate().getTime());
		ticket.setJourneyDate(date);

		String query = "INSERT INTO booking_info  VALUES (?,?,?,?,?,?)";
		String availQuery = "UPDATE  availability SET availSeats=? WHERE availDate=? and flightId=?";
		int totalAvailSeats = dao.checkAvailability(ticket.getFlightId(), (java.sql.Date) ticket.getJourneyDate());

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);
				PreparedStatement availpstmt = conn.prepareStatement(availQuery);) {
			if (ticket.getNumOfSeats() <= totalAvailSeats) {

				//get timestamp
				ticket.setBookingDateTime(new java.sql.Timestamp(new java.util.Date().getTime()));
				pstmt.setInt(1, ticket.getBookingId());
				pstmt.setInt(2, ticket.getFlightId());
				pstmt.setInt(3, ticket.getUserId());
				pstmt.setDate(4, date);
				pstmt.setInt(5, ticket.getNumOfSeats());
				pstmt.setTimestamp(6, (Timestamp)ticket.getBookingDateTime() );
				int tic = pstmt.executeUpdate();
				if (tic > -1) {
					// to decrement number of seats from availability table
					availpstmt.setInt(1, totalAvailSeats - ticket.getNumOfSeats());
					availpstmt.setDate(2, (java.sql.Date) ticket.getJourneyDate());
					availpstmt.setInt(3, ticket.getFlightId());
					availpstmt.executeUpdate();


					if(ticket != null) {
						return ticket;
					}
				}
			} else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ticket;
	}

	@Override
	public Boolean cancelTicket(Integer bookingId, Integer userId) {
		String query = "DELETE FROM booking_info WHERE bookingId=? and userId=?";
		String availQuery = "UPDATE  availability SET availSeats=? WHERE availDate=? and flightId=?";
		Ticket ticket = getTicketInfo(bookingId);
		System.out.println(ticket);

		int totalAvailSeats = dao.checkAvailability(ticket.getFlightId(), (java.sql.Date) ticket.getJourneyDate());

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				PreparedStatement pstmt = conn.prepareStatement(query);
				PreparedStatement availpstmt = conn.prepareStatement(availQuery);) {
			if (ticket != null) {
				pstmt.setInt(1, bookingId);
				pstmt.setInt(2, userId);
				pstmt.executeUpdate();

				availpstmt.setInt(1, ticket.getNumOfSeats() + totalAvailSeats);
				availpstmt.setDate(2, (java.sql.Date) ticket.getJourneyDate());
				availpstmt.setInt(3, ticket.getFlightId());
				availpstmt.executeUpdate();
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public Ticket getTicketInfo(Integer bookingId) {
		String query = "SELECT * FROM booking_info where bookingId=" + bookingId;

		try (Connection conn = DriverManager.getConnection(AirlineReservationSystem.DB_URL,
				AirlineReservationSystem.DB_USER, AirlineReservationSystem.DB_PASSWORD);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(query)) {

			if (rs.next()) {

				Ticket ticket = new Ticket();
				ticket.setBookingId(rs.getInt("bookingId"));
				ticket.setFlightId(rs.getInt("flightId"));
				ticket.setUserId(rs.getInt("userId"));
				ticket.setJourneyDate(rs.getDate("journDate"));
				ticket.setNumOfSeats(rs.getInt("noSeats"));
				ticket.setBookingDateTime(rs.getTimestamp("bookingDT"));
				return ticket;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

}
