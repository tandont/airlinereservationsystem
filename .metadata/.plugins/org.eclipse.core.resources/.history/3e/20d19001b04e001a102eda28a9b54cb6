package com.capgemini.airlinereservationsystem.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import org.apache.log4j.Logger;

import com.capgemini.airlinereservationsystem.dto.Admin;
import com.capgemini.airlinereservationsystem.dto.Flight;
import com.capgemini.airlinereservationsystem.dto.FlightAvailability;
import com.capgemini.airlinereservationsystem.dto.Personnel;
import com.capgemini.airlinereservationsystem.dto.Ticket;
import com.capgemini.airlinereservationsystem.dto.User;
import com.capgemini.airlinereservationsystem.exceptions.DeletionFailedException;
import com.capgemini.airlinereservationsystem.exceptions.FlightNotFoundException;
import com.capgemini.airlinereservationsystem.exceptions.LoginFailedException;
import com.capgemini.airlinereservationsystem.exceptions.RegistrationFailedException;
import com.capgemini.airlinereservationsystem.exceptions.TicketBookingFailedException;
import com.capgemini.airlinereservationsystem.exceptions.UpdationFailedException;
import com.capgemini.airlinereservationsystem.service.AdminService;
import com.capgemini.airlinereservationsystem.service.FlightBookingService;
import com.capgemini.airlinereservationsystem.service.PersonnelService;
import com.capgemini.airlinereservationsystem.service.UserService;
import com.capgemini.airlinereservationsystem.service.impl.AdminServiceImpl;
import com.capgemini.airlinereservationsystem.service.impl.FlightBookingServiceImpl;
import com.capgemini.airlinereservationsystem.service.impl.PersonnelServiceImpl;
import com.capgemini.airlinereservationsystem.service.impl.UserServiceImpl;
import com.capgemini.airlinereservationsystem.validations.Validator;

public class SubController {
	static Scanner scanner = new Scanner(System.in);
	static Logger log = Logger.getLogger("ARS");
	static AdminService adminService = new AdminServiceImpl();
	static PersonnelService personnelService = new PersonnelServiceImpl();
	static UserService userService = new UserServiceImpl();
	static FlightBookingService bookingService = new FlightBookingServiceImpl();
	static int userId;
	static int personnelId;
	
	public void showSubControl() {
		log.info("----------------------------");
		log.info("Flight booking & Scheduling System ");

		while (true) {
			System.out.println("----------------------------");
			System.out.println("Please choose any option...!!! ");
			System.out.println("----------------------------");
			System.out.println("Press 1 for Admin Login");
			System.out.println("Press 2 for Personnel Login");
			System.out.println("Press 3 for User Login");
			System.out.println("Press 4 for Register User");
			System.out.println("Press 0 for Close Application");
			System.out.println("----------------------------");

			int choice = Integer.parseInt(scanner.next());
			if (choice == 1) {
				Admin admin = null;
				// Admin Login
				try {
					admin = adminLogin();
				} catch (LoginFailedException e) {
					e.printStackTrace();
				}
				if (admin != null) {
					System.out.println("Login Successfull");
					System.out.println("Hello " + admin.getAdminName());
					boolean b = true;
					while (b) {
						System.out.println("=============================");
						System.out.println("Enter a choice");
						System.out.println("1) Add Personnel");
						System.out.println("2) Delete Personnel");
						System.out.println("3) Delete User");
						System.out.println("0) Logout");

						int ch = Integer.parseInt(scanner.next());
						switch (ch) {
						case 1:

							try {
								registerPersonnel();
							} catch (RegistrationFailedException e1) {
								e1.printStackTrace();
							}

							break;
						case 2:
							try {
								deletePersonnel();
							} catch (DeletionFailedException e) {
								e.printStackTrace();
							}
							break;
						case 3:
							try {
								deleteUser();
							} catch (DeletionFailedException e) {
								e.printStackTrace();
							}
							break;
						case 0:
							b = false;
							break;
						default:
							System.out.println("Please choose the correct option");
						}
					}
				} else {
					System.out.println("Login Failed");
				}
			} else if (choice == 2) {
				Personnel personnel = null;
				// Personnel login
				try {
					personnel = loginPersonnel();
				} catch (LoginFailedException e) {
					e.printStackTrace();
				}
				if (personnel != null) {
					System.out.println("Login Successfull");
					System.out.println("Hello " + personnel.getPersonnelName());
					boolean b = true;
					while (b) {
						System.out.println("=============================");
						System.out.println("Please enter your choice");
						System.out.println("1) Add Flight");
						System.out.println("2) Delete Flight");
						System.out.println("3) Update Flight");
						System.out.println("4) Get all Tickets");
						System.out.println("5) Set flight availability");
						System.out.println("0) Logout");

						int option = Integer.parseInt(scanner.next());
						switch (option) {
						case 1:
							try {
								addFlight();
							} catch (RegistrationFailedException e) {
								e.printStackTrace();
							}
							break;
						case 2:
							try {
								deleteflight();
							} catch (DeletionFailedException e) {
								e.printStackTrace();
							}
							break;
						case 3:
							try {
								updateFlight();
							} catch (UpdationFailedException e) {
								e.printStackTrace();
							}
							break;
						case 4:
							getTicketInfo();
							break;
						case 5:
							try {
								setFlightFlightAvailability();
							} catch (FlightNotFoundException e) {
								e.printStackTrace();
							}
							break;
						case 0:
							b = false;
							break;
						default:
							System.out.println("Please enter correct option");
						}
					}
				} else {
					System.out.println("Login Failed");
				}
			} else if (choice == 3) {
				User user = null;
				// User Login
				try {
					user = loginUser();
				} catch (LoginFailedException e) {
					e.printStackTrace();
				}
				if (user != null) {
					System.out.println("Login Successfull");
					System.out.println("Hello " + user.getUserName());

					boolean b = true;
					while (b) {
						System.out.println("=============================");
						System.out.println("Enter a choice");
						System.out.println("1) Update User");
						System.out.println("2) Delete User");
						System.out.println("3) Book ticket");
						System.out.println("4) Cancel ticket");
						System.out.println("5) Print Ticket");
						System.out.println("6) Check FlightAvailability");
						System.out.println("7) Give  Feedback");
						System.out.println("0) Logout");

						int option = Integer.parseInt(scanner.next());
						switch (option) {
						case 1:
							try {
								updateUser();
							} catch (UpdationFailedException e1) {
								e1.printStackTrace();
							}
							break;
						case 2:
							try {
								deleteUser();
							} catch (DeletionFailedException e) {
								e.printStackTrace();
							}
							break;
						case 3:
							try {
								bookTicket();
							} catch (TicketBookingFailedException e) {
								e.printStackTrace();
							}
							break;
						case 4:
							cancelTicket();
							break;
						case 5:
							getTicketInfo();
							break;
						case 6:
							checkFlightAvailability();
							break;
						case 7:
							break;
						case 0:
							b = false;
							break;
						}
					}
				} else {
					System.out.println("Login Failed");
				}
			} else if (choice == 4) {
				try {
					registerUser();
				} catch (RegistrationFailedException e) {
					e.printStackTrace();
				}
			} else if (choice == 0) {
				break;
			} else {
				System.out.println("Please select the correct option");
			}
		}
	}

	public static Admin adminLogin() throws LoginFailedException {
		int adminId = 0;
		while (true) {
			System.out.println("Enter the adminId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				adminId = sId;
				break;
			} else {
				System.out.println("Id should be only an Integer");
			}
		}
		System.out.println("Enter Admin password");
		String password = scanner.next();
		Admin admin = adminService.adminLogin(adminId, password);
		if (admin != null) {
			return admin;
		} else {
			throw new LoginFailedException("Admin login Failed");
		}
	}

	public static void registerPersonnel() throws RegistrationFailedException {
		Personnel personnel = new Personnel();
		while (true) {
			System.out.println("Enter the personnelId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				personnel.setPersonnelId(sId);
				break;
			} else {
				System.out.println("Id should be an integer only");
			}
		}
		System.out.println("Enter the personnelName");
		personnel.setPersonnelName(scanner.next());
		while (true) {
			System.out.println("Enter the email id");
			String sEmail = Validator.validEmail(scanner.next());
			if (sEmail != null) {
				personnel.setPersonnelEmail(sEmail);
				break;
			} else {
				System.out.println("Please enter valid Email id");
			}
		}
		System.out.println("Enter the password");
		personnel.setPersonnelPassword(scanner.next());
		while (true) {
			System.out.println("Enter the contact no.");
			Long contact = Validator.validContact(scanner.next());
			if (contact != null) {
				personnel.setPersonnelContact(contact);
				break;
			} else {
				System.out.println("Contavt No. should be 10 digits");
			}
		}
		personnel = adminService.registerPersonnel(personnel);
		if (personnel != null) {
			System.out.println("Registration sucessful");
		} else {
			throw new RegistrationFailedException("Personnel Registration Failed (Duplicate id is not allowed!)");
		}
	}

	private static void deletePersonnel() throws DeletionFailedException {
		System.out.println("Enter the personnelId to be deleted");
		Integer personnelId = scanner.nextInt();

		if (adminService.deletePersonnel(personnelId)) {
			System.out.println("Personnel deleted sucessfully");
		} else {
			throw new DeletionFailedException("Personnel Profile deletion Failed");
		}
	}

	private static void deleteUser() throws DeletionFailedException {
		System.out.println("Enter the userId to be deleted");
		Integer userId = scanner.nextInt();

		if (adminService.deleteUser(userId)) {
			System.out.println("User deleted sucessfully");
		} else {
			throw new DeletionFailedException("User Profile deletion Failed");
		}
	}

	public static Personnel loginPersonnel() throws LoginFailedException {
		int personnelId = 0;
		while (true) {
			System.out.println("Enter the personnelId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				personnelId = sId;
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		System.out.println("Enter Personnel password");
		String password = scanner.next();
		Personnel personnel = personnelService.loginPersonnel(personnelId, password);
		if (personnel != null) {
			return personnel;
		} else {
			throw new LoginFailedException("Personnel login Failed");
		}
	}

	public static void addFlight() throws RegistrationFailedException {
		Flight flight = new Flight();
		int flightId = 0;
		while (true) {
			System.out.println("Enter the flightId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				flight.setFlightId(sId);
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		System.out.println("Enter Flight name");
		flight.setFlightName(scanner.next());
		System.out.println("Enter source point");
		flight.setSource(scanner.next());
		System.out.println("Enter Destination point");
		flight.setDestination(scanner.next());
		System.out.println("Enter Flight type");
		flight.setFlightType(scanner.next());
		System.out.println("Enter Total seats");
		flight.setTotalSeats(Integer.parseInt(scanner.next()));
		System.out.println("Enter fare charge");
		flight.setPrice(scanner.nextDouble());

		if (personnelService.addFlight(flight) != null) {
			System.out.println("Flight added Successfully");
		} else {
			throw new RegistrationFailedException("Failed to add Flight");
		}
	}

	public static void updateFlight() throws UpdationFailedException {
		Flight flight = new Flight();
		int flightId = 0;
		while (true) {
			System.out.println("Enter the flightId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				flight.setFlightId(sId);
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		System.out.println("Enter new Flight name");
		flight.setFlightName(scanner.next());
		System.out.println("Enter new source point");
		flight.setSource(scanner.next());
		System.out.println("Enter new Destination point");
		flight.setDestination(scanner.next());
		System.out.println("Enter new Flight type");
		flight.setFlightType(scanner.next());
		System.out.println("Enter new Total seats");
		flight.setTotalSeats(Integer.parseInt(scanner.next()));
		System.out.println("Enter new fare charge");
		flight.setPrice(scanner.nextDouble());

		if (personnelService.updateFlight(flight)) {
			System.out.println("Flight updated Successfully");
		} else {
			throw new UpdationFailedException("Failed to Update Flight");
		}

	}

	public static void deleteflight() throws DeletionFailedException {
		int flightId = 0;
		while (true) {
			System.out.println("Enter the flightId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				flightId = sId;
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		System.out.println("Do you want to delete\n1. Yes");
		if (Integer.parseInt(scanner.next()) == 1) {
			if (personnelService.deleteFlight(flightId)) {
				System.out.println("Successfully deleted Flight data ");
			} else {
				throw new DeletionFailedException("Flight data not deleted");
			}
		}
	}

	private static void getTicketInfo() {
		int flightId = 0;
		while (true) {
			System.out.println("Enter the flightId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				flightId = sId;
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}

		System.out.println("Enter the date(yyyy-mm-dd)");
		String tempDate = scanner.next();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = null;
		try {
			date = sdf.parse(tempDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		List<Ticket> ticketAL = personnelService.getTicketByFlight(flightId, date);
		if (ticketAL.size() > 0) {
			System.out.println("Tickets :");
			for (Ticket ticket : ticketAL) {
				System.out.println("--------------------------------------------");
				System.out.println(ticket);
			}
		} else {
			System.out.println("No Ticket found");
		}
	}

	private static void setFlightFlightAvailability() throws FlightNotFoundException {
		FlightAvailability availability = new FlightAvailability();
		int flightId = 0;
		while (true) {
			System.out.println("Enter the flightId");
			Integer sId = Validator.validateId(scanner.next());
			if (sId != null) {
				flightId = sId;
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		Flight flight = bookingService.searchFlight(flightId);
		if (flight != null) {
			System.out.println(flight);
			availability.setFlightId(flightId);
			System.out.println("Enter the Available seats");
			availability.setAvailSeat(Integer.parseInt(scanner.next()));
			System.out.println("Enter the date(yyyy-mm-dd)");
			String tempDate = scanner.next();

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date date = null;
			try {
				date = sdf.parse(tempDate);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			availability.setAvailDate(date);

			if (personnelService.setFlightFlightAvailability(availability)) {
				System.out.println("Successfully Set the availability");
			}
		} else {
			System.out.println("Failed to Set the availability");
			throw new FlightNotFoundException("No Flight found");
		}
	}

	public static void registerUser() throws RegistrationFailedException {
		User user = new User();
		while (true) {
			System.out.println("Enter the userId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				user.setUserId(sId);
				break;
			} else {
				System.out.println("Id should be number");
			}
		}
		System.out.println("Enter the userName");
		user.setUserName(scanner.next());
		while (true) {
			System.out.println("Enter your Email id");
			String sEmail = Validator.validEmail(scanner.next());
			if (sEmail != null) {
				user.setUserEmail(sEmail);
				break;
			} else {
				System.out.println("Please enter valid email id");
			}
		}
		System.out.println("Enter the password");

		user.setUserPassword(scanner.next());
		while (true) {
			System.out.println("Enter the contact no.");
			Long contact = Validator.validContact(scanner.next());
			if (contact != null) {
				user.setUserContact(contact);
				break;
			} else {
				System.out.println("Mobile number should be 10 digits");
			}
		}
		user = userService.registerUser(user);
		if (user != null) {
			System.out.println("Registration sucessfull..!");
		} else {
			throw new RegistrationFailedException("Failed to register the user(Duplicate id is not allowed..!)");
		}
	}

	public static User loginUser() throws LoginFailedException {

		while (true) {
			System.out.println("Enter the userId");
			Integer sId = Validator.validId(scanner.next());
			if (sId != null) {
				userId = sId;
				break;
			} else {
				System.out.println("Id should be Integer");
			}
		}
		System.out.println("Enter the password");
		String password = scanner.next();
		User user = userService.loginUser(userId, password);
		if (user != null) {
			return user;
		} else {
			throw new LoginFailedException("User Login Failed");
		}
	}

	private static void updateUser() throws UpdationFailedException {
		User user = new User();
		user.setUserId(userId);
		System.out.println("Enter new password");
		user.setUserPassword(scanner.next());
		System.out.println("Enter New UserName");
		user.setUserName(scanner.next());
		while (true) {
			System.out.println("Enter the email id");
			String sEmail = Validator.validEmail(scanner.next());
			if (sEmail != null) {
				user.setUserEmail(sEmail);
				break;
			} else {
				System.out.println("Please enter valid email");
			}
		}
		while (true) {
			System.out.println("Enter the contact no.");
			Long contact = Validator.validContact(scanner.next());
			if (contact != null) {
				user.setUserContact(contact);
				break;
			} else {
				System.out.println("Contact should be 10 digits..!");
			}
		}
		if (userService.updateUser(user)) {
			System.out.println("Profile sucessfully Updated");
		} else {
			throw new UpdationFailedException("Failed to update user profile");
		}
	}

	private static void bookTicket() throws TicketBookingFailedException {
		Ticket ticket = new Ticket();
		System.out.println("Enter source point");
		String source = scanner.next();
		System.out.println("Enter Destination point");
		String destination = scanner.next();
		System.out.println("Enter the date(yyyy-mm-dd)");
		String tempDate = scanner.next();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = null;
		try {
			date = sdf.parse(tempDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		// set Date
		ticket.setJourneyDate(date);
		// get current Date
		long millis = System.currentTimeMillis();
		java.sql.Date currentDate = new java.sql.Date(millis);
		List<FlightAvailability> flightlist = bookingService.checkFlightAvailability(source, destination, date);
		if (flightlist.size() > 0) {
			for (FlightAvailability avail : flightlist) {
				System.out.println(avail);
				Flight flight = bookingService.searchFlight(avail.getFlightId());
				int availSeats = avail.getAvailSeat();
				System.out.println(flight);
				System.out.println("Available seats : " + availSeats);
				System.out.println("-------------------------------------------------");
			}

			Integer flightId = 0;
			boolean idState = true;
			while (idState) {
				System.out.println("Enter the flightId");
				String sId = scanner.next();
				flightId = Validator.validId(sId);
				if (flightId != null) {
					ticket.setFlightId(flightId);
					idState = false;
				} else {
					System.out.println("Id should be Integer");
				}
				// get the global userId
				ticket.setUserId(userId);

				Integer availSeats = bookingService.checkFlightAvailability(flightId, date);
				if (availSeats > 0) {
					System.out.println("Total available seats : " + availSeats);
				}

				System.out.println("Please enter no. of seats to book");
				int numOfSeats = Integer.parseInt(scanner.next());
				if (numOfSeats > 0) {
					ticket.setNumOfSeats(numOfSeats);
				} else {
					throw new TicketBookingFailedException("Failed to book Ticket");
				}
				Random random = new Random();
				int bookingId = random.nextInt(100000);
				ticket.setBookingId(bookingId);
				Ticket bookedTicket = userService.bookTicket(ticket);
				if (bookedTicket != null) {
					System.out.println("Ticket sucessfully Booked");
					System.out.println(bookedTicket);
				} else {
					throw new TicketBookingFailedException("Ticket Booking Failed");
				}

			}
		}
	}

	private static void cancelTicket() {
		Ticket ticket = null;
		List<Integer> ticketList = personnelService.getAllTicket(userId);

		if (ticketList.size() > 0) {
			for (Integer bookingId : ticketList) {
				ticket = userService.getTicketInfo(bookingId);
				System.out.println(ticket);
				System.out.println("------------------------------------------");
			}
			int bookingId = 0;
			while (true) {
				System.out.println("Enter the bookingId");
				Integer sflightId = Validator.validId(scanner.next());
				if (sflightId != null) {
					bookingId = sflightId;
					break;
				} else {
					System.out.println("Id should be Integer");
				}
			}
			if (userService.cancelTicket(bookingId, userId)) {
				System.out.println("Ticket cancelled");
			} else {
				System.out.println("Ticket cancelation Failed");
			}
		} else {
			System.out.println("No tickets found to cancel");
		}
	}

	private static void checkFlightAvailability() {

		System.out.println("Enter source point");
		String source = scanner.next();
		System.out.println("Enter Destination point");
		String destination = scanner.next();

		System.out.println("Enter the date(yyyy-mm-dd)");
		String tempDate = scanner.next();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = null;
		try {
			date = sdf.parse(tempDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		List<FlightAvailability> FlightList = bookingService.checkFlightAvailability(source, destination, date);
		for (FlightAvailability aflight : flightList) {
			System.out.println(aflight);
			int availSeats = bookingService.checkFlightAvailability(aflight.getFlightId(), date);

			System.out.println("Available seats : " + availSeats);
			System.out.println("-----------------------------------------");
		}
	}

	
	}
}
